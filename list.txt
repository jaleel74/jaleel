data allocation:
2 types
1.static allocation
2.dynamic allocation

1.static allocation:
it is also called as direct allocation
static allocation is the process of assigning memory to variables,objects and instructions when a program is being compiled.
a=10
b= 34
2.dynamic allocation:
it is also called as user defined allocation
a=input("enter the input)----->string
a=int(iput("enter the value"))---->integer
a=float(input("enter the value"))---->float

list:
it is an ordered collection of elements in an sequence.
Lists are used to store multiple items in a single variable.

Lists are created using square brackets "[]".

ex
Create a List:

list = ["apple", "banana", "cherry"]
print(list)

List items are mutable i.e it can  changeable/modified.
it allows duplicate values.

List items are indexed, the first item has index [0], the second item has index [1] etc.

Ordered
When we say that lists are ordered, it means that the items have a defined order, and that order will not change.

If you add new items to a list, the new items will be placed at the end of the list.

Changeable
The list is changeable, meaning that we can change, add, and remove items in a list after it has been created.

Allow Duplicates
Since lists are indexed, lists can have items with the same value:

Example
Lists allow duplicate values:

list = ["apple", "banana", "cherry", "apple", "cherry"]
print(list)
print(len(list))

tuple:
it is an ordered collection of data/elements.
Tuples are used to store multiple items in a single variable.

Tuples are represented with paranthesis ().

ex:
Create a Tuple:

tuple = ("apple", "banana", "cherry","grappes","pine apple")
print(tuple)

Tuple items are ordered, unchangeable, and allow duplicate values.

Ordered
When we say that tuples are ordered, it means that the items have a defined order, and that order will not change.

Unchangeable
Tuples are unchangeable, meaning that we cannot change, add or remove items after the tuple has been created.

Allow Duplicates
Since tuples are indexed, they can have items with the same value:

Example
Tuples allow duplicate values:

tuple = ("apple", "banana", "cherry", "apple", "cherry")
print(tuple)

Tuple Length

Example

tuple = ("apple", "banana", "cherry")
print(len(tuple))


set:
it is an unordered collection of data/elements.
Sets are used to store multiple items in a single variable.
Sets are represented with curly brackets "{}"

Ex:
set = {"ap", "ts", "mp","up","goa"}
print(set)

Set items are unordered, unchangeable, and do not allow duplicate values.

Unordered
Unordered means that the items in a set do not have a defined order.

Set items can appear in a different order every time you use them, and cannot be referred to by index or key.

Unchangeable
Set items are unchangeable, meaning that we cannot change the items after the set has been created.

Once a set is created, you cannot change its items, but you can remove items and add new items.

Duplicates Not Allowed
Sets cannot have two items with the same value.

Example

set = {"apple", "banana", "cherry", "apple"}

print(set)
print(len(set))

dictionary:
Dictionaries are used to store data values in key:value pairs.

A dictionary is a collection which is ordered*, changeable and do not allow duplicates.


Dictionaries are represented with curly brackets"{}", and have keys and values:

Ex

emp1={"name":"pasha","designation":"software engineer","age":"27","age":"27"}
print(emp1)

Dictionary items are presented in key:value pairs, and can be referred to by using the key name.
keys should not be duplicate
value can be duplicate
When we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change.


Changeable
Dictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created.

Duplicates Not Allowed
Dictionaries cannot have two items with the same key:


list vs tupple:

list
Lists are mutable
 
tuple
Tuples are immutable

list
The implication of iterations is Time-consuming

tuple
The implication of iterations is comparatively Faster

list
The list is better for performing operations, such as insertion and deletion.

tuple
A Tuple data type is appropriate for accessing the elements

list
Lists consume more memory

tuple
Tuple consumes less memory as compared to the list

list
Lists have several built-in methods

tuple
Tuple does not have many built-in methods.

list
Unexpected changes and errors are more likely to occur

tuple
tuples donâ€™t change they are far less error-prone.

list vs set:
list
Lists is Mutable

set
Set is Mutable

list
It is Ordered collection of items

set
It is Unordered collection of items	


list
Items in list can be replaced or changed

set
Items in set cannot be changed or replaced but you can remove and add new items.


creating a list
1.
list=["physics","maths","science","social","telugu","hindi]
print("list of subjects is:",list)
print(len(list))

2.
list=["sachin","viart","rohit","pointing","pant"]
print("list of cricketers is :",list)
print(len(list))

creating a tuple
1.
tuple=("january","febraury","march","april","may")
print("months in a calender is:",tuple)
print(len(tuple)

2.
tuple=("summer","rainy","winter","summer")
print("seasons in a year is :",tuple)
print(len(tuple))

creating a set
1.
set = {"apple","samsung","real me","nothing","vivo"}
print("brands in mobilephones is :",set)
print(len(set))

2.
set ={"pizza","burger","donuts","waffles"}
print(set)
print(len(set))

creating a dictionary

1.
emp1={"name":"pasha","designation":"software engineer","age":"27","age":"27"}
print(emp1)
print(len(emp1))
2.
dict={"brand":"samsung","model":"s23 ultra","storage":"128gb","cost":"90000"}
print(dict)
print(len(dict))

create 1 tuple and covert it to list
update the list
convert back list to tuple
delete the created tuple

tuple = (1, 2, 3)
list = list(tuple)
print("List after conversion:", list)
list.append(4)
print("List after update:",list)

tuple = tuple(list)
print("Tuple after conversion back:",tuple)

del tuple


