set operations:
1.union:
it returns a set that contains all items from the original set, and all items from the specified set

ex:
set1={1,3,5,7,9}
set2={0,2,4,6,8}
union=set1|set2
print(union)
 
2.intersection:
The intersection() method returns a set that contains the similarity between two or more sets.

ex:
set1={1,3,5,7,9}
set2={0,2,4,6,8}
set3={1,2,3,4,5,6,7,8,9}
union=set1|set2
print(union)
intersection=set1&set3
print(intersection)

3.difference:
The difference() method returns a set that contains the difference between two sets.

ex:
set1={1,3,5,7,9}
set2={0,2,4,6,8}
set3=set1.difference(set2)
print(set3)


conditions:
Equals: a == b
Not Equals: a != b
Less than: a < b
Less than or equal to: a <= b
Greater than: a > b
Greater than or equal to: a >= b
These conditions can be used in several ways, most commonly in "if statements" and loops.

If statement:
executes & displays the output when the condition is true/satisfied

ex:
a = 33
b = 200
if b > a:
  print("b is greater than a")

Elif:
if primary condition was not satisfied then it will execute the secondary condition & displays the output correspondingly.

ex: 
a = 33
b = 33
if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")


Else:
The else keyword catches anything which isn't caught by the preceding conditions.

Example
a = 200
b = 33
if b > a:
  print("b is greater than a")
elif a == b:
  print("a and b are equal")
else:
  print("a is greater than b")

Short Hand If/One line if statement:
If you have only one statement to execute, you can put it on the same line as the if statement.

Example:
a=25
b=15
if a > b: print("a is greater than b")


Short Hand If Else/One line if else statement:

If you have only one statement to execute, one for if, and one for else, you can put it all on the same line.

Example
a = 2
b = 330
print("A") if a > b else print("B")


One line if else statement, with 3 conditions:
ex:
a = 330
b = 330
print("A") if a > b else print("equal") if a == b else print("B")


And:
The And keyword is a logical operator, and is used to combine conditional statements:

Example
 if a is greater than b, AND if c is greater than a:

a = 200
b = 33
c = 500
if a > b and c > a:
  print("Both conditions are True")

Or:
The or keyword is a logical operator, and is used to combine conditional statements:

Example:
if a is greater than b, OR if a is greater than c:

a = 200
b = 33
c = 500
if a > b or a > c:
  print("At least one of the conditions is True")


Not:
The not keyword is a logical operator, and is used to reverse the result of the conditional statement:

Example:
if a is NOT greater than b:

a = 33
b = 200
if not a > b:
  print("a is NOT greater than b")


Nested If:
You can have if statements inside if statements, this is called nested if statements.

Example:
x = 41

if x > 10:
  print("Above ten,")
  if x > 20:
    print("and also above 20!")
  else:
    print("but not above 20.")

 

The pass Statement:
if statements cannot be empty, but if you have if statement with no content, put in the pass statement to avoid getting an error.

Example:
a = 33
b = 200

if b > a:
  pass

Loops:
The while Loop
With the while loop we can execute a set of statements as long as a condition is true.

Example

i = 1
while i < 6:
  print(i)
  i += 1
o/p:1,2,3,4,5


The break Statement:
With the break statement we can stop the loop even if the while condition is true:

Example
i = 1
while i < 6:
  print(i)
  if i == 3:
    break
  i += 1
o/p:1,2,3
The continue Statement
With the continue statement we can stop the current iteration, and continue with the next:

Example
i = 0
while i < 6:
  i += 1
  if i == 3:
    continue
  print(i)
o/p:0,1,2,4,5,6


The else Statement:
With the else statement we can run a block of code once when the condition no longer is true:

Example
i = 1
while i < 6:
  print(i)
  i += 1
else:
  print("i is no longer less than 6")
o/p:1,2,3,4,5, i is no longer less than 6


For Loops:
for loop is used for iterating over a sequence of elements.

Example:
fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)

The break Statement:
With the break statement we can stop the loop before it has looped through all the items:

Example:
fruits = ["apple", "banana", "cherry"]
for x in fruits:
  print(x)
  if x == "banana":
    break

continue Statement:
With the continue statement we can stop the current iteration of the loop, and continue with the next:

Example:
fruits = ["apple", "banana", "cherry"]
for x in fruits:
  if x == "banana":
    continue
  print(x)


The else Statement:
The else keyword in a for loop specifies a block of code to be executed when the loop is finished:

Example:
for x in range(6):
  print(x)
else:
  print("Finally finished!")


Nested Loops:
A nested loop is a loop inside a loop.

The "inner loop" will be executed one time for each iteration of the "outer loop":

Example:
adj = ["red", "big", "tasty"]
fruits = ["apple", "banana", "cherry"]

for x in adj:
  for y in fruits:
    print(x, y)

The pass Statement:
Example
for x in [0, 1, 2]:
  pass



